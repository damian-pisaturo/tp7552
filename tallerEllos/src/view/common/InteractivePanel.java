package view.common;

import view.exception.common.CannotUndoException;

import java.awt.event.KeyEvent;
import java.util.Hashtable;
import javax.swing.JLabel;
import javax.swing.JSlider;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;

import controller.InteractiveController;

/**
 * Contiene todos los elementos que permiten que las operaciones se realicen en
 * forma interactiva.
 * 
 * @author Agustina Freije
 */
public class InteractivePanel extends javax.swing.JPanel {
  private static final long serialVersionUID = 1L;
  private InteractiveController controller;

  private static int MIN = 0;
  private static int MAX = 200;

  /** Creates new form InteractivePanel */
  public InteractivePanel() {
    initComponents();
    this.controller = null;
    this.setEnabledButtons(false);
    this.slider.setMinimum(MIN);
    this.slider.setMaximum(MAX);
    this.slider.addChangeListener(new SliderListener());
  }

  /**
   * Agrega un controlador
   * @param controller controlador a agregar
   */
  public void addInteractiveController(InteractiveController controller) {
    this.controller = controller;
  }

  /**
   * Cambia el controlador interactivo
   * @param controller nuevo controlador
   */
  /*public void setInteractiveController(InteractiveController controller) {
    this.controller = controller;
  }*/

  /**
   * Habilita (o desactiva) los botones del panel
   * @param b true para habilitar, false para desactivar.
   */
  public void setEnabledButtons(boolean b) {
    this.nextButton.setEnabled(b);
    this.undoStepButton.setEnabled(b);
  }

  /**
   * Habilita (o no) el boton siguiente
   * @param b true para habilitar, false en caso contrario
   */
  public void setEnabledNextButton(boolean b) {
    this.nextButton.setEnabled(b);
  }

  /**
   * Habilita (o no) el boton deshacer
   * @param b true para habilitar, false en caso contrario
   */
  public void setEnabledUndoButton(boolean b){
    this.undoStepButton.setEnabled(b);
  }

  /**
   * Ajusta el valor
   * @param value nuevo valor.
   */
  public void setValueSlider(int value) {
    this.slider.setValue(value);
  }

  public void setMaximumSlider(int max){
    this.slider.setMaximum(max);
  }
  
  /**
   * This method is called from within the constructor to initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is always
   * regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {
    java.awt.GridBagConstraints gridBagConstraints;

    buttonPanel = new javax.swing.JPanel();
    labelStep = new javax.swing.JLabel();
    panel = new javax.swing.JPanel();
    checkBoxInteractive = new javax.swing.JCheckBox();
    nextButton = new javax.swing.JButton();
    undoStepButton = new javax.swing.JButton();
    sliderPanel = new javax.swing.JPanel();
    jLabel1 = new javax.swing.JLabel();
    slider = new javax.swing.JSlider();

    setLayout(new java.awt.GridBagLayout());

    buttonPanel.setBackground(new java.awt.Color(255, 255, 255));
    buttonPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
    buttonPanel.setMaximumSize(new java.awt.Dimension(270, 45));
    buttonPanel.setMinimumSize(new java.awt.Dimension(270, 45));
    buttonPanel.setPreferredSize(new java.awt.Dimension(270, 45));
    buttonPanel.setLayout(new javax.swing.BoxLayout(buttonPanel, javax.swing.BoxLayout.Y_AXIS));

    labelStep.setText("Paso por Paso");
    labelStep.setAlignmentX(0.5F);
    buttonPanel.add(labelStep);

    panel.setBackground(new java.awt.Color(255, 255, 255));
    panel.setMaximumSize(new java.awt.Dimension(260, 20));
    panel.setMinimumSize(new java.awt.Dimension(260, 20));
    panel.setPreferredSize(new java.awt.Dimension(260, 60));
    panel.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

    checkBoxInteractive.setBackground(new java.awt.Color(255, 255, 255));
    checkBoxInteractive.setText("Interactivo");
    checkBoxInteractive.setAlignmentX(1.0F);
    checkBoxInteractive.setMaximumSize(new java.awt.Dimension(85, 20));
    checkBoxInteractive.setMinimumSize(new java.awt.Dimension(85, 20));
    checkBoxInteractive.setPreferredSize(new java.awt.Dimension(85, 20));
    checkBoxInteractive.setMnemonic(KeyEvent.VK_N);
    checkBoxInteractive.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        checkBoxInteractiveActionPerformed(evt);
      }
    });
    panel.add(checkBoxInteractive);

    nextButton.setText("Siguiente");
    nextButton.setMargin(new java.awt.Insets(2, 5, 2, 5));
    nextButton.setMaximumSize(new java.awt.Dimension(80, 20));
    nextButton.setMinimumSize(new java.awt.Dimension(80, 20));
    nextButton.setPreferredSize(new java.awt.Dimension(80, 20));
    nextButton.setMnemonic(KeyEvent.VK_S);
    nextButton.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        nextButtonActionPerformed(evt);
      }
    });
    panel.add(nextButton);

    undoStepButton.setText("Deshacer");
    undoStepButton.setMargin(new java.awt.Insets(2, 5, 2, 5));
    undoStepButton.setMaximumSize(new java.awt.Dimension(80, 20));
    undoStepButton.setMinimumSize(new java.awt.Dimension(80, 20));
    undoStepButton.setPreferredSize(new java.awt.Dimension(80, 20));
    undoStepButton.setMnemonic(KeyEvent.VK_H);
    undoStepButton.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        undoStepButtonActionPerformed(evt);
      }
    });
    panel.add(undoStepButton);

    buttonPanel.add(panel);

    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 0;
    gridBagConstraints.gridwidth = java.awt.GridBagConstraints.RELATIVE;
    gridBagConstraints.gridheight = java.awt.GridBagConstraints.REMAINDER;
    gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
    add(buttonPanel, gridBagConstraints);

    sliderPanel.setBackground(new java.awt.Color(255, 255, 255));
    sliderPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
    sliderPanel.setLayout(new javax.swing.BoxLayout(sliderPanel, javax.swing.BoxLayout.PAGE_AXIS));

    jLabel1.setText("Velocidad");
    jLabel1.setAlignmentX(0.5F);
    sliderPanel.add(jLabel1);

    slider.setBackground(new java.awt.Color(255, 255, 255));
    slider.setMinorTickSpacing(5);
    slider.setPaintLabels(true);
    Hashtable<Integer, JLabel> labelTable =  new Hashtable<Integer, JLabel>();
    labelTable.put(new Integer( 0 ), new JLabel("Lento") );
    labelTable.put(new Integer( slider.getMaximum() ), new JLabel("Rapido") );
    slider.setLabelTable(labelTable);
    sliderPanel.add(slider);

    //add(Box.createRigidArea(new Dimension(1,0)));

    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.gridy = 0;
    gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
    gridBagConstraints.gridheight = java.awt.GridBagConstraints.REMAINDER;
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.weighty = 1.0;
    add(sliderPanel, gridBagConstraints);
  }// </editor-fold>//GEN-END:initComponents

  /**
   * Invocado cuando se hace click sobre el check bock
   * @param evt
   */
  private void checkBoxInteractiveActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_checkBoxInteractiveActionPerformed
    setEnabledButtons(false);
    controller.setInteractive(this.checkBoxInteractive.isSelected());
  }// GEN-LAST:event_checkBoxInteractiveActionPerformed

  /**
   * Invodo cuando se presiona el boton "Siguiente"
   * @param evt evento
   */
  private void nextButtonActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_nextButtonActionPerformed
    setEnabledButtons(false);
    controller.nextStep();
  }// GEN-LAST:event_nextButtonActionPerformed

  /**
   * Invocado cuando se presiona el boton "deshacer"
   * @param evt evento
   */
  private void undoStepButtonActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_undoStepButtonActionPerformed
    try {
      controller.undoStep();
      setEnabledButtons(false);
    } catch (CannotUndoException ex) {
      // TODO
    }
  }// GEN-LAST:event_undoStepButtonActionPerformed

  private class SliderListener implements ChangeListener {
    public void stateChanged(ChangeEvent event) {
      JSlider source = (JSlider) event.getSource();
      if (!source.getValueIsAdjusting()) {
        int speed = (int) source.getValue();
        controller.speedChanged(speed);
      }
    }
  }

  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JPanel buttonPanel;
  private javax.swing.JCheckBox checkBoxInteractive;
  private javax.swing.JLabel jLabel1;
  private javax.swing.JLabel labelStep;
  private javax.swing.JButton nextButton;
  private javax.swing.JPanel panel;
  private javax.swing.JSlider slider;
  private javax.swing.JPanel sliderPanel;
  private javax.swing.JButton undoStepButton;
  // End of variables declaration//GEN-END:variables

}
